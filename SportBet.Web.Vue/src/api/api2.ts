//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined, cancelToken?: CancelToken): Promise<AuthenticationResult> {
        let url_ = this.baseUrl + "/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<AuthenticationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));
            return Promise.resolve<AuthenticationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticationResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addUser(body: AddUserRequest | undefined, cancelToken?: CancelToken): Promise<AddUserResponse> {
        let url_ = this.baseUrl + "/Auth/add-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddUser(_response);
        });
    }

    protected processAddUser(response: AxiosResponse): Promise<AddUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<AddUserResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddUserResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUser(body: UpdateUserRequest | undefined, cancelToken?: CancelToken): Promise<UpdateUserResponse> {
        let url_ = this.baseUrl + "/Auth/update-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<UpdateUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<UpdateUserResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateUserResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined, cancelToken?: CancelToken): Promise<ChangePasswordResponse> {
        let url_ = this.baseUrl + "/Auth/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<ChangePasswordResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<ChangePasswordResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChangePasswordResponse>(null as any);
    }

    /**
     * @return Success
     */
    getCards( cancelToken?: CancelToken): Promise<MyBets[]> {
        let url_ = this.baseUrl + "/Bet/get-cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCards(_response);
        });
    }

    protected processGetCards(response: AxiosResponse): Promise<MyBets[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<MyBets[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBets[]>(null as any);
    }

    /**
     * @return Success
     */
    getCard(id: number, cancelToken?: CancelToken): Promise<MyBet[]> {
        let url_ = this.baseUrl + "/Bet/get-card/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCard(_response);
        });
    }

    protected processGetCard(response: AxiosResponse): Promise<MyBet[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<MyBet[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBet[]>(null as any);
    }

    /**
     * @return Success
     */
    getCardExtended(id: number, cancelToken?: CancelToken): Promise<MyBetExtende> {
        let url_ = this.baseUrl + "/Bet/get-card-extended/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCardExtended(_response);
        });
    }

    protected processGetCardExtended(response: AxiosResponse): Promise<MyBetExtende> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<MyBetExtende>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBetExtende>(null as any);
    }

    /**
     * @return Success
     */
    getActiveBets( cancelToken?: CancelToken): Promise<GetActivBetsResponse[]> {
        let url_ = this.baseUrl + "/Bet/get-active-bets";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetActiveBets(_response);
        });
    }

    protected processGetActiveBets(response: AxiosResponse): Promise<GetActivBetsResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetActivBetsResponse[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActivBetsResponse[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createMatchSelection(body: CreateMatchSelectionsRequest | undefined, cancelToken?: CancelToken): Promise<CreateMatchSelectionsResponse> {
        let url_ = this.baseUrl + "/Bet/create-match-selection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateMatchSelection(_response);
        });
    }

    protected processCreateMatchSelection(response: AxiosResponse): Promise<CreateMatchSelectionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<CreateMatchSelectionsResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateMatchSelectionsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    betOn(body: BetOnGame | undefined, cancelToken?: CancelToken): Promise<BetOnGameResponse> {
        let url_ = this.baseUrl + "/Bet/bet-on";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBetOn(_response);
        });
    }

    protected processBetOn(response: AxiosResponse): Promise<BetOnGameResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<BetOnGameResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BetOnGameResponse>(null as any);
    }

    /**
     * @return Success
     */
    getBetResult(id: number, cancelToken?: CancelToken): Promise<BetResultResponse> {
        let url_ = this.baseUrl + "/Bet/get-bet-result/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBetResult(_response);
        });
    }

    protected processGetBetResult(response: AxiosResponse): Promise<BetResultResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<BetResultResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BetResultResponse>(null as any);
    }

    /**
     * @return Success
     */
    getMatchSelectionsAll( cancelToken?: CancelToken): Promise<GetActiveMatchs[]> {
        let url_ = this.baseUrl + "/Bet/get-match-selections";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchSelectionsAll(_response);
        });
    }

    protected processGetMatchSelectionsAll(response: AxiosResponse): Promise<GetActiveMatchs[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetActiveMatchs[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActiveMatchs[]>(null as any);
    }

    /**
     * @return Success
     */
    getMatchSelections(id: number, cancelToken?: CancelToken): Promise<GetActiveMatch> {
        let url_ = this.baseUrl + "/Bet/get-match-selections/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchSelections(_response);
        });
    }

    protected processGetMatchSelections(response: AxiosResponse): Promise<GetActiveMatch> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetActiveMatch>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActiveMatch>(null as any);
    }

    /**
     * @return Success
     */
    getMatchTypesAll( cancelToken?: CancelToken): Promise<GetMatchTypes[]> {
        let url_ = this.baseUrl + "/Bet/get-match-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchTypesAll(_response);
        });
    }

    protected processGetMatchTypesAll(response: AxiosResponse): Promise<GetMatchTypes[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetMatchTypes[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMatchTypes[]>(null as any);
    }

    /**
     * @return Success
     */
    getMatchTypes(id: number, cancelToken?: CancelToken): Promise<GetMatchTypes> {
        let url_ = this.baseUrl + "/Bet/get-match-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchTypes(_response);
        });
    }

    protected processGetMatchTypes(response: AxiosResponse): Promise<GetMatchTypes> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetMatchTypes>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMatchTypes>(null as any);
    }

    /**
     * @return Success
     */
    getOutcomes( cancelToken?: CancelToken): Promise<GetOutcomes[]> {
        let url_ = this.baseUrl + "/Bet/get-outcomes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOutcomes(_response);
        });
    }

    protected processGetOutcomes(response: AxiosResponse): Promise<GetOutcomes[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<GetOutcomes[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetOutcomes[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateBetResult(matchtypeId: number, body: UpdateBetResultRequest | undefined, cancelToken?: CancelToken): Promise<UpdateBetResult> {
        let url_ = this.baseUrl + "/Bet/update-bet-result/{matchtypeid}";
        if (matchtypeId === undefined || matchtypeId === null)
            throw new Error("The parameter 'matchtypeId' must be defined.");
        url_ = url_.replace("{matchtypeId}", encodeURIComponent("" + matchtypeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateBetResult(_response);
        });
    }

    protected processUpdateBetResult(response: AxiosResponse): Promise<UpdateBetResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<UpdateBetResult>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateBetResult>(null as any);
    }

    /**
     * @return Success
     */
    getTeams( cancelToken?: CancelToken): Promise<TeamResponse[]> {
        let url_ = this.baseUrl + "/Team";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTeams(_response);
        });
    }

    protected processGetTeams(response: AxiosResponse): Promise<TeamResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<TeamResponse[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponse[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addTeam(body: AddTeamCommand | undefined, cancelToken?: CancelToken): Promise<TeamResponse> {
        let url_ = this.baseUrl + "/Team";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddTeam(_response);
        });
    }

    protected processAddTeam(response: AxiosResponse): Promise<TeamResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(JSON.stringify(resultData200));;
            return Promise.resolve<TeamResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponse>(null as any);
    }
}

export interface AddTeamCommand {
    name?: string | null;
    shortName?: string | null;
}

export interface AddUserRequest {
    username?: string | null;
    password?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
}

export interface AddUserResponse {
    id?: number;
    statusName?: string | null;
}

export interface AuthenticationResult {
    token?: string | null;
    userId?: number;
}

export interface BetOnGame {
    selectionId?: number;
    matchTypeId?: number;
    matches?: MatchRequest[] | null;
    amount?: number;
}

export interface BetOnGameResponse {
    statusName?: string | null;
    isSaved?: boolean;
}

export interface BetResultResponse {
    matches?: MatchResponse[] | null;
    betAmount?: number;
    wonAmount?: number;
    totalWinCount?: number;
    cardId?: number;
    matchSelectionId?: number;
    matchTypeId?: number;
}

export interface ChangePasswordRequest {
    password?: string | null;
    newPassword?: string | null;
}

export interface ChangePasswordResponse {
    id?: number;
    statusName?: string | null;
}

export interface CreateMatchSelectionsRequest {
    name?: string | null;
    description?: string | null;
    activeUntil?: Date;
    matches?: number[] | null;
    matchesTypes?: number[] | null;
}

export interface CreateMatchSelectionsResponse {
    matchSelectionId?: number;
    statusName?: string | null;
    isSaved?: boolean;
}

export interface GetActivBetsResponse {
    id?: number;
    name?: string | null;
    description?: string | null;
    typeName?: string | null;
    isEnabled?: boolean;
}

export interface GetActiveMatch {
    matchSelectionId?: number;
    name?: string | null;
    description?: string | null;
    activeUntil?: Date;
    matches?: SelectionMatchResponse[] | null;
}

export interface GetActiveMatchs {
    matchSelectionId?: number;
    name?: string | null;
    description?: string | null;
    isEnabled?: boolean;
}

export interface GetMatchTypes {
    matchTypeId?: number;
    name?: string | null;
}

export interface GetOutcomes {
    id?: number;
    outcomeId?: number;
    name?: string | null;
    isEnabled?: boolean;
}

export interface LoginRequest {
    username?: string | null;
    password?: string | null;
}

export interface MatchRequest {
    matchId?: number;
    outcomeId?: number;
}

export interface MatchResponse {
    matchId?: number;
    outcomeId?: number;
    matchResultId?: number;
    matchResult?: string | null;
}

export interface MyBet {
    betCardId?: number;
    matchId?: number;
    homeTeam?: string | null;
    home?: string | null;
    awayTeam?: string | null;
    away?: string | null;
    matchType?: string | null;
    outcomeId?: number;
    outcomeName?: string | null;
    createdAt?: Date;
    matchSelectionId?: number;
    matchSelectionName?: string | null;
    matchSelectionDescription?: string | null;
}

export interface MyBetExtende {
    betCardId?: number;
    createdAt?: Date;
    matchSelectionId?: number;
    matchSelectionName?: string | null;
    matchSelectionDescription?: string | null;
    betAmount?: number;
    wonAmount?: number;
    totalWinCount?: number;
    matchType?: string | null;
    matches?: MyBetMatchExtend[] | null;
}

export interface MyBetMatchExtend {
    matchId?: number;
    homeTeam?: string | null;
    home?: string | null;
    awayTeam?: string | null;
    away?: string | null;
    outcomeId?: number;
    outcomeName?: string | null;
    matchResultId?: number;
    matchResult?: string | null;
}

export interface MyBets {
    betCardId?: number;
    matchSelectionId?: number;
    matchTypeId?: number;
    matchSelection?: string | null;
    matchType?: string | null;
}

export interface SelectionMatchResponse {
    matchSelectionId?: number;
    matchId?: number;
    homeId?: number;
    home?: string | null;
    homeTeam?: string | null;
    awayId?: number;
    awayTeam?: string | null;
    away?: string | null;
    matchDate?: Date;
}

export interface TeamResponse {
    id?: number;
    name?: string | null;
    shortName?: string | null;
}

export interface UpdateBetResult {
    message?: string | null;
}

export interface UpdateBetResultRequest {
    matchSelectionId?: number;
    matchId?: number;
    outcomeId?: number;
}

export interface UpdateUserRequest {
    id?: number;
    username?: string | null;
    password?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
}

export interface UpdateUserResponse {
    id?: number;
    statusName?: string | null;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}