//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class BetClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getBets(  cancelToken?: CancelToken | undefined): Promise<MyBets[] | null> {
        let url_ = this.baseUrl + "/Bet/get-cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBets(_response);
        });
    }

    protected processGetBets(response: AxiosResponse): Promise<MyBets[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<MyBets[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBets[] | null>(null as any);
    }

    getBet(id: number , cancelToken?: CancelToken | undefined): Promise<MyBet[] | null> {
        let url_ = this.baseUrl + "/Bet/get-card/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBet(_response);
        });
    }

    protected processGetBet(response: AxiosResponse): Promise<MyBet[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<MyBet[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBet[] | null>(null as any);
    }

    getBetExtended(id: number , cancelToken?: CancelToken | undefined): Promise<MyBetExtende | null> {
        let url_ = this.baseUrl + "/Bet/get-card-extended/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBetExtended(_response);
        });
    }

    protected processGetBetExtended(response: AxiosResponse): Promise<MyBetExtende | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<MyBetExtende | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MyBetExtende | null>(null as any);
    }

    getAviliableBets(  cancelToken?: CancelToken | undefined): Promise<GetActivBetsResponse[] | null> {
        let url_ = this.baseUrl + "/Bet/get-active-bets";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAviliableBets(_response);
        });
    }

    protected processGetAviliableBets(response: AxiosResponse): Promise<GetActivBetsResponse[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetActivBetsResponse[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActivBetsResponse[] | null>(null as any);
    }

    createMatchSelection(equalityContract: string | undefined, name: string | undefined, description: string | undefined, activeUntil: Date | undefined, matches: number[] | undefined, matchesTypes: number[] | undefined , cancelToken?: CancelToken | undefined): Promise<CreateMatchSelectionsResponse | null> {
        let url_ = this.baseUrl + "/Bet/create-match-selection?";
        if (equalityContract === null)
            throw new Error("The parameter 'equalityContract' cannot be null.");
        else if (equalityContract !== undefined)
            url_ += "EqualityContract=" + encodeURIComponent("" + equalityContract) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (activeUntil === null)
            throw new Error("The parameter 'activeUntil' cannot be null.");
        else if (activeUntil !== undefined)
            url_ += "ActiveUntil=" + encodeURIComponent(activeUntil ? "" + activeUntil.toISOString() : "") + "&";
        if (matches === null)
            throw new Error("The parameter 'matches' cannot be null.");
        else if (matches !== undefined)
            matches && matches.forEach(item => { url_ += "Matches=" + encodeURIComponent("" + item) + "&"; });
        if (matchesTypes === null)
            throw new Error("The parameter 'matchesTypes' cannot be null.");
        else if (matchesTypes !== undefined)
            matchesTypes && matchesTypes.forEach(item => { url_ += "MatchesTypes=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateMatchSelection(_response);
        });
    }

    protected processCreateMatchSelection(response: AxiosResponse): Promise<CreateMatchSelectionsResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CreateMatchSelectionsResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateMatchSelectionsResponse | null>(null as any);
    }

    betOnSelection(equalityContract: string | undefined, selectionId: number | undefined, matchTypeId: number | undefined, matches: MatchRequest[] | undefined, amount: number | undefined , cancelToken?: CancelToken | undefined): Promise<BetOnGameResponse | null> {
        let url_ = this.baseUrl + "/Bet/bet-on?";
        if (equalityContract === null)
            throw new Error("The parameter 'equalityContract' cannot be null.");
        else if (equalityContract !== undefined)
            url_ += "EqualityContract=" + encodeURIComponent("" + equalityContract) + "&";
        if (selectionId === null)
            throw new Error("The parameter 'selectionId' cannot be null.");
        else if (selectionId !== undefined)
            url_ += "SelectionId=" + encodeURIComponent("" + selectionId) + "&";
        if (matchTypeId === null)
            throw new Error("The parameter 'matchTypeId' cannot be null.");
        else if (matchTypeId !== undefined)
            url_ += "MatchTypeId=" + encodeURIComponent("" + matchTypeId) + "&";
        if (matches === null)
            throw new Error("The parameter 'matches' cannot be null.");
        else if (matches !== undefined)
            matches && matches.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Matches[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        if (amount === null)
            throw new Error("The parameter 'amount' cannot be null.");
        else if (amount !== undefined)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBetOnSelection(_response);
        });
    }

    protected processBetOnSelection(response: AxiosResponse): Promise<BetOnGameResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<BetOnGameResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BetOnGameResponse | null>(null as any);
    }

    getBetResult(id: number , cancelToken?: CancelToken | undefined): Promise<BetResultResponse | null> {
        let url_ = this.baseUrl + "/Bet/get-bet-result/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBetResult(_response);
        });
    }

    protected processGetBetResult(response: AxiosResponse): Promise<BetResultResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<BetResultResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BetResultResponse | null>(null as any);
    }

    getMatchSelectionsAll(  cancelToken?: CancelToken | undefined): Promise<GetActiveMatchs[] | null> {
        let url_ = this.baseUrl + "/Bet/get-match-selections";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchSelectionsAll(_response);
        });
    }

    protected processGetMatchSelectionsAll(response: AxiosResponse): Promise<GetActiveMatchs[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetActiveMatchs[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActiveMatchs[] | null>(null as any);
    }

    getMatchSelections(id: number , cancelToken?: CancelToken | undefined): Promise<GetActiveMatch | null> {
        let url_ = this.baseUrl + "/Bet/get-match-selections/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchSelections(_response);
        });
    }

    protected processGetMatchSelections(response: AxiosResponse): Promise<GetActiveMatch | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetActiveMatch | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetActiveMatch | null>(null as any);
    }

    getMatchTypesAll(  cancelToken?: CancelToken | undefined): Promise<GetMatchTypes[] | null> {
        let url_ = this.baseUrl + "/Bet/get-match-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchTypesAll(_response);
        });
    }

    protected processGetMatchTypesAll(response: AxiosResponse): Promise<GetMatchTypes[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetMatchTypes[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMatchTypes[] | null>(null as any);
    }

    getMatchTypes(id: number , cancelToken?: CancelToken | undefined): Promise<GetMatchTypes | null> {
        let url_ = this.baseUrl + "/Bet/get-match-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMatchTypes(_response);
        });
    }

    protected processGetMatchTypes(response: AxiosResponse): Promise<GetMatchTypes | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetMatchTypes | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMatchTypes | null>(null as any);
    }

    getOutcomes(  cancelToken?: CancelToken | undefined): Promise<GetOutcomes[] | null> {
        let url_ = this.baseUrl + "/Bet/get-outcomes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOutcomes(_response);
        });
    }

    protected processGetOutcomes(response: AxiosResponse): Promise<GetOutcomes[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetOutcomes[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetOutcomes[] | null>(null as any);
    }

    updateBetResult(matchtypeId: number, equalityContract: string | undefined, matchTypeId: number, matchSelectionId: number | undefined, matchId: number | undefined, outcomeId: number | undefined , cancelToken?: CancelToken | undefined): Promise<UpdateBetResult | null> {
        let url_ = this.baseUrl + "/Bet/update-bet-result/{matchtypeid}?";
        if (matchtypeId === undefined || matchtypeId === null)
            throw new Error("The parameter 'matchtypeId' must be defined.");
        url_ = url_.replace("{matchtypeId}", encodeURIComponent("" + matchtypeId));
        if (matchTypeId === undefined || matchTypeId === null)
            throw new Error("The parameter 'matchTypeId' must be defined.");
        url_ = url_.replace("{MatchTypeId}", encodeURIComponent("" + matchTypeId));
        if (equalityContract === null)
            throw new Error("The parameter 'equalityContract' cannot be null.");
        else if (equalityContract !== undefined)
            url_ += "EqualityContract=" + encodeURIComponent("" + equalityContract) + "&";
        if (matchSelectionId === null)
            throw new Error("The parameter 'matchSelectionId' cannot be null.");
        else if (matchSelectionId !== undefined)
            url_ += "MatchSelectionId=" + encodeURIComponent("" + matchSelectionId) + "&";
        if (matchId === null)
            throw new Error("The parameter 'matchId' cannot be null.");
        else if (matchId !== undefined)
            url_ += "MatchId=" + encodeURIComponent("" + matchId) + "&";
        if (outcomeId === null)
            throw new Error("The parameter 'outcomeId' cannot be null.");
        else if (outcomeId !== undefined)
            url_ += "OutcomeId=" + encodeURIComponent("" + outcomeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateBetResult(_response);
        });
    }

    protected processUpdateBetResult(response: AxiosResponse): Promise<UpdateBetResult | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UpdateBetResult | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateBetResult | null>(null as any);
    }
}

export class AuthClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    login(request: LoginRequest | undefined , cancelToken?: CancelToken | undefined): Promise<AuthenticationResult | null> {
        let url_ = this.baseUrl + "/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<AuthenticationResult | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AuthenticationResult | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticationResult | null>(null as any);
    }

    addUser(request: AddUserRequest | undefined , cancelToken?: CancelToken | undefined): Promise<AddUserResponse | null> {
        let url_ = this.baseUrl + "/Auth/add-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddUser(_response);
        });
    }

    protected processAddUser(response: AxiosResponse): Promise<AddUserResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AddUserResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddUserResponse | null>(null as any);
    }

    updateUser(request: UpdateUserRequest | undefined , cancelToken?: CancelToken | undefined): Promise<UpdateUserResponse | null> {
        let url_ = this.baseUrl + "/Auth/update-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<UpdateUserResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UpdateUserResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateUserResponse | null>(null as any);
    }

    changePassword(request: ChangePasswordRequest | undefined , cancelToken?: CancelToken | undefined): Promise<ChangePasswordResponse | null> {
        let url_ = this.baseUrl + "/Auth/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<ChangePasswordResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ChangePasswordResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChangePasswordResponse | null>(null as any);
    }
}

export class TeamClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getTeams(  cancelToken?: CancelToken | undefined): Promise<TeamResponse[] | null> {
        let url_ = this.baseUrl + "/Team";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTeams(_response);
        });
    }

    protected processGetTeams(response: AxiosResponse): Promise<TeamResponse[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TeamResponse[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponse[] | null>(null as any);
    }

    addTeam(equalityContract: string | undefined, name: string | undefined, shortName: string | undefined , cancelToken?: CancelToken | undefined): Promise<TeamResponse | null> {
        let url_ = this.baseUrl + "/Team?";
        if (equalityContract === null)
            throw new Error("The parameter 'equalityContract' cannot be null.");
        else if (equalityContract !== undefined)
            url_ += "EqualityContract=" + encodeURIComponent("" + equalityContract) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (shortName === null)
            throw new Error("The parameter 'shortName' cannot be null.");
        else if (shortName !== undefined)
            url_ += "ShortName=" + encodeURIComponent("" + shortName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddTeam(_response);
        });
    }

    protected processAddTeam(response: AxiosResponse): Promise<TeamResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TeamResponse | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TeamResponse | null>(null as any);
    }
}

export interface MyBets {
    BetCardId: number;
    MatchSelectionId: number;
    MatchTypeId: number;
    MatchSelection: string;
    MatchType: string;
}

export interface MyBet {
    BetCardId: number;
    MatchId: number;
    HomeTeam: string;
    Home: string;
    AwayTeam: string;
    Away: string;
    MatchType: string;
    OutcomeId: number;
    OutcomeName: string;
    CreatedAt: Date;
    MatchSelectionId: number;
    MatchSelectionName: string;
    MatchSelectionDescription: string;
}

export interface MyBetExtende {
    BetCardId: number;
    CreatedAt: Date;
    MatchSelectionId: number;
    MatchSelectionName: string;
    MatchSelectionDescription: string;
    BetAmount: number;
    WonAmount: number;
    TotalWinCount: number;
    MatchType: string;
    Matches: MyBetMatchExtend[];
}

export interface MyBetMatchExtend {
    MatchId: number;
    HomeTeam: string;
    Home: string;
    AwayTeam: string;
    Away: string;
    OutcomeId: number;
    OutcomeName: string;
    MatchResultId: number;
    MatchResult: string;
}

export interface GetActivBetsResponse {
    Id: number;
    Name: string;
    Description: string;
    TypeName: string;
    IsEnabled: boolean;
}

export interface CreateMatchSelectionsResponse {
    MatchSelectionId: number;
    StatusName: string;
    IsSaved: boolean;
}

export interface BetOnGameResponse {
    StatusName: string;
    IsSaved: boolean;
}

export interface MatchRequest {
    MatchId: number;
    OutcomeId: number;
}

export interface BetResultResponse {
    Matches: MatchResponse[];
    BetAmount: number;
    WonAmount: number;
    TotalWinCount: number;
    CardId: number;
    MatchSelectionId: number;
    MatchTypeId: number;
}

export interface MatchResponse {
    MatchId: number;
    OutcomeId: number;
    MatchResultId: number;
    MatchResult: string;
}

export interface GetActiveMatchs {
    MatchSelectionId: number;
    Name: string;
    Description: string;
    IsEnabled: boolean;
}

export interface GetActiveMatch {
    MatchSelectionId: number;
    Name: string;
    Description: string;
    ActiveUntil: Date;
    Matches: SelectionMatchResponse[];
}

export interface SelectionMatchResponse {
    MatchSelectionId: number;
    MatchId: number;
    HomeId: number;
    Home: string;
    HomeTeam: string;
    AwayId: number;
    AwayTeam: string;
    Away: string;
    MatchDate: Date;
}

export interface GetMatchTypes {
    MatchTypeId: number;
    Name: string;
}

export interface GetOutcomes {
    Id: number;
    OutcomeId: number;
    Name: string;
    IsEnabled: boolean;
}

export interface UpdateBetResult {
    Message: string;
}

export interface AuthenticationResult {
    Token: string;
    UserId: number;
}

export interface LoginRequest {
    Username: string;
    Password: string;
}

export interface AddUserResponse {
    Id: number;
    StatusName: string;
}

export interface AddUserRequest {
    Username: string;
    Password: string;
    FirstName: string;
    MiddleName: string;
    LastName: string;
    PhoneNumber: string;
    Email: string;
}

export interface UpdateUserResponse {
    Id: number;
    StatusName: string;
}

export interface UpdateUserRequest {
    Id: number;
    Username: string;
    Password: string;
    FirstName: string;
    MiddleName: string;
    LastName: string;
    PhoneNumber: string;
    Email: string;
}

export interface ChangePasswordResponse {
    Id: number;
    StatusName: string;
}

export interface ChangePasswordRequest {
    Password: string;
    NewPassword: string;
}

export interface TeamResponse {
    Id: number;
    Name: string;
    ShortName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}